version: '3.5'

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: 'developer'
      POSTGRES_PASSWORD: 'supersecretpassword'
    volumes:
      - openmusicdb:/var/lib/postgresql/data
    networks:
      - openmusicbackend

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - '8090:8080'
    depends_on:
      - postgres
    networks:
      - openmusicbackend

  redis:
    container_name: redis
    image: redis:latest
    # image: redislabs/redismod
    restart: always
    ports:
      - '6379:6379'
    networks:
      - openmusicbackend

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - openmusicbackend

  redisinsight:
    container_name: redisinsight
    image: redislabs/redisinsight:latest
    restart: always
    ports:
      - '8001:8001'
    volumes:
      - redis-insight:/db
      # - ./Users/rifandani/data/redisinsight:/db
    networks:
      - openmusicbackend
    depends_on:
      - redis
      # - graph
      # - search
      # - timeseries

  # graph:
  #   image: redislabs/redisgraph
  #   ports:
  #     - "6380:6379"
  #   restart: on-failure

  # search:
  #   image: redislabs/redisearch:latest
  #   ports:
  #     - "6381:6379"
  #   restart: on-failure

  # timeseries:
  #   image: redislabs/redistimeseries
  #   ports:
  #     - "6382:6379"
  #   restart: on-failure

  # redis-commander:
  #   container_name: redis-commander
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #   - REDIS_HOSTS=local:redis:6379
  #   ports:
  #   - "8081:8081"

volumes:
  openmusicdb:
    name: openmusicdb
  redis-insight:
    name: redis-insight

networks:
  openmusicbackend:
    name: openmusicbackend-network
